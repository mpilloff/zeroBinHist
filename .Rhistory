, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
transmute(date, daily_change = close/lag(close) - 1)
daily_change
daily_change <- raw_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
transmute(date, daily_percent_change = close/lag(close) - 1, year = year(date))
View(daily_change)
daily_change <- raw_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, daily_percent_change = close/lag(close) - 1, year = year(date))
daily_change <- raw_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, close_last, daily_percent_change = close/lag(close) - 1, year = year(date))
daily_change <- raw_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, close, daily_percent_change = close/lag(close) - 1, year = year(date))
binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change")
library(zeroBinHist)
library(dplyr)
library(lubridate)
library(janitor)
library(stringr)
library(rlang)
library(rlang)
devtools::install_github("mpilloff/zeroBinHist")
library(zeroBinHist)
library(dplyr)
library(lubridate)
library(janitor)
library(stringr)
binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change")
rm(list() = all())
rm(list = ls())
library(zeroBinHist)
library(dplyr)
library(lubridate)
library(janitor)
library(stringr)
raw_data <- read.csv("vignettes/HistoricalData_1746910817326.csv")
raw_data <- read.csv("~/zeroBinHist/vignettes/HistoricalData_1746910817326.csv")
daily_change <- raw_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, close, daily_percent_change = close/lag(close) - 1, year = year(date))
binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(zeroBinHist)
library(dplyr)
library(lubridate)
library(janitor)
library(stringr)
binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change")
View(binned_data)
yearly_binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change", group_col = "year")
View(yearly_binned_data)
View(raw_data)
View(binned_data)
plot <- zeroBinHist::plot_zero_bin_histogram(binned_data, group_col = NULL, counter = 0.005, x_format = percent_format(0.01))
plot
plot <- zeroBinHist::plot_zero_bin_histogram(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot
plot_zero_bin_histogram <- function(
binned_data,
group_col = "name",
counter = 0.5,
y_var = "prop",
y_format = percent_format(),
x_format = number_format(),
drop_line = F) {
library(ggplot2)
library(dplyr)
library(scales)
bin_width <- unique(binned_data$bin_width)
# Get axis range from cutoff values
# Add/subtract half a bin to include the cutoff bins
cutoff_low <- unique(binned_data$cutoff_low) - .5*bin_width
cutoff_high <- unique(binned_data$cutoff_high) + .5*bin_width
# Compute label positions and text
x_min <- floor(cutoff_low/counter)*counter
x_max <- ceiling(cutoff_high/counter)*counter
.labels <- seq(x_min, x_max, by = counter)
## Manually change x-axis to move all ticks by 1/2 bin width
.breaks <- sapply(.labels, function(x) {
if (x > 0) {
x + 0.5 * bin_width
} else if (x == 0) {
0
} else {
x - 0.5 * bin_width
}
})
# Build plot
if (!is.null(group_col)) {
group_sym <- sym(group_col)
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var), fill = !!group_sym, group = !!group_sym))
} else {
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var)))
}
p <- p +
geom_col(position = "identity", alpha = 0.5, width = bin_width) +
scale_x_continuous(
expand = c(0, 0),
limits = c(x_min  - .5*bin_width , x_max + .5*bin_width),
breaks = .breaks,
labels = x_format(.labels)
)+
scale_y_continuous(
labels = y_format
, expand = c(0, 0)
)
if (drop_line) {
max_y <- binned_data %>% summarise(max_val = max(!!sym(y_var))) %>% pull(max_val)
p <- p +
annotate("text", x = 0, y = max_y, label = "No Change", vjust = 3, hjust = -0.08,
size = 10 / ggplot2::.pt, color = "black", fontface = "plain") +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.5, color = "black")
}
return(p)
}
plot <- plot_zero_bin_histogram(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot
plot_zero_bin_histogram_2 <- plot_zero_bin_histogram
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot
plot_zero_bin_histogram <- function(
binned_data,
group_col = "name",
counter = 0.5,
y_var = "prop",
y_format = percent_format(),
x_format = number_format(),
drop_line = F) {
library(ggplot2)
library(dplyr)
library(scales)
bin_width <- unique(binned_data$bin_width)
# Get axis range from cutoff values
# Add/subtract half a bin to include the cutoff bins
cutoff_low <- unique(binned_data$cutoff_low) - .5*bin_width
cutoff_high <- unique(binned_data$cutoff_high) + .5*bin_width
# Compute label positions and text
x_min <- floor(cutoff_low/counter)*counter
x_max <- ceiling(cutoff_high/counter)*counter
.labels <- seq(x_min, x_max, by = counter)
## Manually change x-axis to move all ticks by 1/2 bin width
.breaks <- sapply(.labels, function(x) {
if (x > 0) {
x + 0.5 * bin_width
} else if (x == 0) {
0
} else {
x - 0.5 * bin_width
}
})
# Build plot
if (!is.null(group_col)) {
group_sym <- sym(group_col)
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var), fill = !!group_sym, group = !!group_sym))
} else {
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var)))
}
p <- p +
geom_col(position = "identity", alpha = 0.5, width = bin_width) +
scale_x_continuous(
expand = c(0, 0),
limits = c(x_min  - .5*bin_width , x_max + .5*bin_width),
breaks = .breaks,
labels = x_format(.labels)
)+
scale_y_continuous(
labels = y_format
, expand = c(0, 0)
)
if (drop_line) {
max_y <- binned_data %>% summarise(max_val = max(!!sym(y_var))) %>% pull(max_val)
p <- p +
annotate("text", x = 0, y = max_y, label = "No Change", vjust = 3, hjust = -0.08,
size = 10 / ggplot2::.pt, color = "black", fontface = "plain") +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.5, color = "black")
}
return(p)
}
plot_zero_bin_histogram <- function(
binned_data,
group_col = NULL,
counter = 0.5,
y_var = "prop",
y_format = percent_format(),
x_format = number_format(),
drop_line = F) {
library(ggplot2)
library(dplyr)
library(scales)
bin_width <- unique(binned_data$bin_width)
# Get axis range from cutoff values
# Add/subtract half a bin to include the cutoff bins
cutoff_low <- unique(binned_data$cutoff_low) - .5*bin_width
cutoff_high <- unique(binned_data$cutoff_high) + .5*bin_width
# Compute label positions and text
x_min <- floor(cutoff_low/counter)*counter
x_max <- ceiling(cutoff_high/counter)*counter
.labels <- seq(x_min, x_max, by = counter)
## Manually change x-axis to move all ticks by 1/2 bin width
.breaks <- sapply(.labels, function(x) {
if (x > 0) {
x + 0.5 * bin_width
} else if (x == 0) {
0
} else {
x - 0.5 * bin_width
}
})
# Build plot but add in redundancy if grouping column does not exist
if (!is.null(group_col)) {
group_sym <- sym(group_col)
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var), fill = !!group_sym, group = !!group_sym))
} else {
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var)))
}
p <- p +
geom_col(position = "identity", alpha = 0.5, width = bin_width) +
scale_x_continuous(
expand = c(0, 0),
limits = c(x_min  - .5*bin_width , x_max + .5*bin_width),
breaks = .breaks,
labels = x_format(.labels)
)+
scale_y_continuous(
labels = y_format
, expand = c(0, 0)
)
if (drop_line) {
max_y <- binned_data %>% summarise(max_val = max(!!sym(y_var))) %>% pull(max_val)
p <- p +
annotate("text", x = 0, y = max_y, label = "No Change", vjust = 3, hjust = -0.08,
size = 10 / ggplot2::.pt, color = "black", fontface = "plain") +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.5, color = "black")
}
return(p)
}
plot_zero_bin_histogram_2 <- plot_zero_bin_histogram
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.001, x_format = percent_format(0.01))
plot
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.01, x_format = percent_format(0.01))
plot
plot2 <- plot_zero_bin_histogram_2(binned_data, counter = 0.05, x_format = percent_format(0.01))
plot2 <- plot_zero_bin_histogram_2(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot2
plot
plot2
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot
yearly_binned_data_to_plot <- yearly_binned_data %>%
filter(year %in% c(2015, 2023)) %>%
mutate(year = year %>% as.character())
plot <- plot_zero_bin_histogram(yearly_binned_data_to_plot, group_col = "year", counter = 0.005, x_format = percent_format(0.01))
plot
plot_yearly <- plot_zero_bin_histogram(yearly_binned_data_to_plot, group_col = "year", counter = 0.005, x_format = percent_format(0.01))
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "ff3333", "2023" = "5533ff"))
plot_yearly_with_legend
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "maroon", "2023" = "darkgreen"))
plot_yearly_with_legend
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "maroon", "2023" = "darkgreen")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank())
plot_yearly_with_legend
plot_zero_bin_histogram <- function(
binned_data,
group_col = NULL,
counter = 0.5,
y_var = "prop",
y_format = percent_format(),
x_format = number_format(),
drop_line = F) {
library(ggplot2)
library(dplyr)
library(scales)
bin_width <- unique(binned_data$bin_width)
# Get axis range from cutoff values
# Add/subtract half a bin to include the cutoff bins
cutoff_low <- unique(binned_data$cutoff_low) - .5*bin_width
cutoff_high <- unique(binned_data$cutoff_high) + .5*bin_width
# Compute label positions and text
x_min <- floor(cutoff_low/counter)*counter
x_max <- ceiling(cutoff_high/counter)*counter
.labels <- seq(x_min, x_max, by = counter)
## Manually change x-axis to move all ticks by 1/2 bin width
.breaks <- sapply(.labels, function(x) {
if (x > 0) {
x + 0.5 * bin_width
} else if (x == 0) {
0
} else {
x - 0.5 * bin_width
}
})
# Build plot but add in redundancy if grouping column does not exist
if (!is.null(group_col)) {
group_sym <- sym(group_col)
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var), fill = !!group_sym, group = !!group_sym))
} else {
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var)))
}
p <- p +
geom_col(position = "identity", alpha = 0.5, width = bin_width) +
scale_x_continuous(
expand = c(0, 0),
limits = c(x_min  - .5*bin_width , x_max + .5*bin_width),
breaks = .breaks,
labels = x_format(.labels)
)+
scale_y_continuous(
labels = y_format
, expand = c(0, 0)
)+
theme(axis.title.x = element_blank())
if (drop_line) {
max_y <- binned_data %>% summarise(max_val = max(!!sym(y_var))) %>% pull(max_val)
p <- p +
annotate("text", x = 0, y = max_y, label = "No Change", vjust = 3, hjust = -0.08,
size = 10 / ggplot2::.pt, color = "black", fontface = "plain") +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.5, color = "black")
}
return(p)
}
binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change")
binned_data
yearly_binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change", group_col = "year")
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.005, x_format = percent_format(0.01))
plot
plot_zero_bin_histogram <- function(
binned_data,
group_col = NULL,
counter = 0.5,
y_var = "prop",
y_format = percent_format(),
x_format = number_format(),
drop_line = F) {
library(ggplot2)
library(dplyr)
library(scales)
bin_width <- unique(binned_data$bin_width)
# Get axis range from cutoff values
# Add/subtract half a bin to include the cutoff bins
cutoff_low <- unique(binned_data$cutoff_low) - .5*bin_width
cutoff_high <- unique(binned_data$cutoff_high) + .5*bin_width
# Compute label positions and text
x_min <- floor(cutoff_low/counter)*counter
x_max <- ceiling(cutoff_high/counter)*counter
.labels <- seq(x_min, x_max, by = counter)
## Manually change x-axis to move all ticks by 1/2 bin width
.breaks <- sapply(.labels, function(x) {
if (x > 0) {
x + 0.5 * bin_width
} else if (x == 0) {
0
} else {
x - 0.5 * bin_width
}
})
# Build plot but add in redundancy if grouping column does not exist
if (!is.null(group_col)) {
group_sym <- sym(group_col)
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var), fill = !!group_sym, group = !!group_sym))
} else {
p <- ggplot(binned_data, aes(x = bin, y = !!sym(y_var)))
}
p <- p +
geom_col(position = "identity", alpha = 0.5, width = bin_width) +
scale_x_continuous(
expand = c(0, 0),
limits = c(x_min  - .5*bin_width , x_max + .5*bin_width),
breaks = .breaks,
labels = x_format(.labels)
)+
scale_y_continuous(
labels = y_format
, expand = c(0, 0)
)
if (drop_line) {
max_y <- binned_data %>% summarise(max_val = max(!!sym(y_var))) %>% pull(max_val)
p <- p +
annotate("text", x = 0, y = max_y, label = "No Change", vjust = 3, hjust = -0.08,
size = 10 / ggplot2::.pt, color = "black", fontface = "plain") +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.5, color = "black")
}
return(p)
}
plot <- plot_zero_bin_histogram_2(binned_data, counter = 0.005, x_format = percent_format(0.01))+
theme(axis.title.x = element_blank())
plot
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "maroon", "2023" = "darkgreen")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank(),
axis.title.x = element_blank())
plot_yearly_with_legend
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "maroon", "2023" = "gold")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank(),
axis.title.x = element_blank())
plot_yearly_with_legend
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "darkred", "2023" = "navy")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank(),
axis.title.x = element_blank())
plot_yearly_with_legend
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "darkred", "2023" = "navy")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank(),
axis.title.x = element_blank())+
theme_minimal()
plot_yearly_with_legend
plot_yearly_with_legend <- zeroBinHist::customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "darkred", "2023" = "navy")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank(),
axis.title.x = element_blank())+
theme_bw()
plot_yearly_with_legend
rmarkdown::render("creating_zero_bin_histogram.Rmd")
rmarkdown::render("vignettes/creating_zero_bin_histogram.Rmd")
raw_stock_price_data <- read.csv("vignettes/HistoricalData_1746910817326.csv")
print(plot)
raw_stock_price_data <- read.csv("~/zeroBinHist/vignettes/HistoricalData_1746910817326.csv")
daily_change <- raw_stock_price_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, close, daily_percent_change = close/lag(close) - 1, year = year(date))
binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change")
yearly_binned_data <- zeroBinHist::bin_data_with_zero(daily_change, value_col = "daily_percent_change", group_col = "year")
yearly_binned_data
head(yearly_binned_data)
library(zeroBinHist)
library(dplyr)
library(lubridate)
library(janitor)
library(stringr)
raw_stock_price_data <- read.csv("~/zeroBinHist/vignettes/HistoricalData_1746910817326.csv")
daily_change <- raw_stock_price_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, close, daily_percent_change = close/lag(close) - 1, year = year(date))
binned_data <- bin_data_with_zero(daily_change, value_col = "daily_percent_change")
yearly_binned_data <- bin_data_with_zero(daily_change, value_col = "daily_percent_change", group_col = "year")
head(yearly_binned_data)
plot <- plot_zero_bin_histogram(binned_data, counter = 0.005, x_format = percent_format(0.01))+
theme(axis.title.x = element_blank())
print(plot)
yearly_binned_data_to_plot <- yearly_binned_data %>%
filter(year %in% c(2015, 2023)) %>%
mutate(year = year %>% as.character())
plot_yearly <- plot_zero_bin_histogram(yearly_binned_data_to_plot, group_col = "year"
, counter = 0.005, x_format = percent_format(0.01), drop_line = T)
plot_yearly_with_legend <- customize_zero_bin_legend(plot_yearly, yearly_binned_data_to_plot, group_col = "year"
, fill_colors = c("2015" = "darkred", "2023" = "navy")) +
theme(legend.position="bottom") +
theme(legend.title=element_blank(),
axis.title.x = element_blank())+
theme_bw()
print(plot_yearly_with_legend)
rm(list = ls())
library(zeroBinHist)
library(dplyr)
library(lubridate)
library(janitor)
library(stringr)
raw_stock_price_data <- read.csv("~/zeroBinHist/vignettes/HistoricalData_1746910817326.csv")
daily_change <- raw_stock_price_data %>%
janitor::clean_names() %>%
mutate(date = mdy(date)
, close = close_last %>% str_remove_all(fixed("$")) %>% as.numeric()) %>%
arrange(date) %>%
transmute(date, close, daily_percent_change = close/lag(close) - 1, year = year(date))
binned_data <- bin_data_with_zero(daily_change, value_col = "daily_percent_change")
yearly_binned_data <- bin_data_with_zero(daily_change, value_col = "daily_percent_change", group_col = "year")
head(yearly_binned_data)
plot <- plot_zero_bin_histogram(binned_data, counter = 0.005, x_format = percent_format(0.01))+
theme(axis.title.x = element_blank())
print(plot)
# install.packages("devtools")
devtools::install_github("mpilloff/zeroBinHist")
